From 6ad32492930929b2090cc16342bb72a12ef22f42 Mon Sep 17 00:00:00 2001
From: Giao Le <giao.le@windriver.com>
Date: Mon, 6 Feb 2017 14:50:43 -0500
Subject: [PATCH 02/20] Newton Rebase part 2

   WRS PCI/SRIOV additions.

__TYPE_single
__TAG_shell,pci,sriov
__R4_commit_57bbc4c

Use Nova PCI Alias for device usage

With the introduction of GPU passthrough support, we now allow an
arbitrary PCI device, defined by device_id, vendor_id, and name
to be added to the PCI alias list.

The trouble is that our WRS extension to the Nova API showing the
PCI device usage was based on a hardoded 'known_pci_devices' list.

This is no longer sufficient, as we need to display the PCI device
usage for the user generated PCI aliases.

This commit takes care of:

- Nova client now allows a PCI alias name or device id to be
  specified in device list/show commands
- Device Name changed to PCI Alias in device list/show output

__TYPE_single
__TAG_pci
__R4_commit_c5bdb01
---
 novaclient/v2/contrib/wrs_pci.py          | 111 ++++++++++++++++++++++++++++++
 novaclient/v2/contrib/wrs_providernets.py |  50 ++++++++++++++
 novaclient/v2/servers.py                  |   3 +
 novaclient/v2/shell.py                    |  15 ++--
 4 files changed, 172 insertions(+), 7 deletions(-)
 create mode 100644 novaclient/v2/contrib/wrs_pci.py
 create mode 100644 novaclient/v2/contrib/wrs_providernets.py

diff --git a/novaclient/v2/contrib/wrs_pci.py b/novaclient/v2/contrib/wrs_pci.py
new file mode 100644
index 0000000..34c9d9d
--- /dev/null
+++ b/novaclient/v2/contrib/wrs_pci.py
@@ -0,0 +1,111 @@
+#   Licensed under the Apache License, Version 2.0 (the "License"); you may
+#   not use this file except in compliance with the License. You may obtain
+#   a copy of the License at
+#
+#       http://www.apache.org/licenses/LICENSE-2.0
+#
+#   Unless required by applicable law or agreed to in writing, software
+#   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+#   License for the specific language governing permissions and limitations
+#   under the License.
+#
+# Copyright (c) 2015-2016 Wind River Systems, Inc.
+#
+#
+#
+#
+
+from six.moves.urllib import parse
+
+from novaclient import base
+from novaclient.i18n import _
+from novaclient import utils
+
+
+class PciDevicesManager(base.Manager):
+    resource_class = base.Resource
+
+    def list(self, host=None, device=None):
+        """
+        Get PCI device usage statistics.
+
+        :param host: Name of the compute host to collect PCI statistics for
+        :param device: Device id or name to collect PCI statistics for
+        :rtype: :class:`PciDevice`
+        """
+        opts = {}
+        if host:
+            opts['host'] = host
+        if device:
+            opts['device'] = device
+
+        # Transform the dict to a sequence of two-element tuples in fixed
+        # order, then the encoded string will be consistent in Python 2&3.
+        new_opts = sorted(opts.items(), key=lambda x: x[0])
+
+        query_string = "?%s" % parse.urlencode(new_opts) if new_opts else ""
+
+        return self._list("/wrs-pci%s" % query_string, "pci_device_usage")
+
+    def get(self, device, host=None):
+        """
+        Get PCI device usage statistics for a specific device.
+
+        :param device: Name of the :class:`PciDevice` to get.
+        :rtype: :class:`PciDevice`
+        """
+        opts = {}
+        if host:
+            opts['host'] = host
+
+        # Transform the dict to a sequence of two-element tuples in fixed
+        # order, then the encoded string will be consistent in Python 2&3.
+        new_opts = sorted(opts.items(), key=lambda x: x[0])
+
+        query_string = "?%s" % parse.urlencode(new_opts) if new_opts else ""
+
+        return self._list("/wrs-pci/%s%s" % (device, query_string),
+                          "pci_device_usage")
+
+
+@utils.arg(
+    '--device',
+    metavar='<device>',
+    help=_('PCI devices matching a particular device id or alias.'),
+    default=None)
+def do_device_list(cs, args):
+    """Show details of PCI devices in the system."""
+    fields = ['PCI Alias', 'Device Id', 'Vendor Id', 'Class Id',
+              'pci_pfs_configured', 'pci_pfs_used', 'pci_vfs_configured',
+              'pci_vfs_used']
+    devices = cs.wrs_pci.list(device=args.device)
+
+    def get_name(device):
+        return device.device_name
+    formatters = {'PCI Alias': get_name}
+
+    utils.print_list(devices, fields, formatters)
+
+
+@utils.arg(
+    'device',
+    metavar='<device>',
+    help=_('device alias or device id of the PCI device.'))
+@utils.arg(
+    '--host',
+    metavar='<host>',
+    help=_('PCI devices matching a particular host'),
+    default=None)
+def do_device_show(cs, args):
+    """Show details of a given PCI device."""
+    fields = ['PCI Alias', 'Device Id', 'Vendor Id', 'Class Id', 'Host',
+              'pci_pfs_configured', 'pci_pfs_used', 'pci_vfs_configured',
+              'pci_vfs_used']
+
+    def get_name(device):
+        return device.device_name
+    formatters = {'PCI Alias': get_name}
+
+    device = cs.wrs_pci.get(args.device, args.host)
+    utils.print_list(device, fields, formatters, sortby_index=4)
diff --git a/novaclient/v2/contrib/wrs_providernets.py b/novaclient/v2/contrib/wrs_providernets.py
new file mode 100644
index 0000000..1fe60e9
--- /dev/null
+++ b/novaclient/v2/contrib/wrs_providernets.py
@@ -0,0 +1,50 @@
+#   Licensed under the Apache License, Version 2.0 (the "License"); you may
+#   not use this file except in compliance with the License. You may obtain
+#   a copy of the License at
+#
+#       http://www.apache.org/licenses/LICENSE-2.0
+#
+#   Unless required by applicable law or agreed to in writing, software
+#   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+#   License for the specific language governing permissions and limitations
+#   under the License.
+#
+# Copyright (c) 2015 Wind River Systems, Inc.
+#
+#
+#
+#
+
+from novaclient import base
+from novaclient.i18n import _
+from novaclient import utils
+
+
+class ProviderNet(base.Resource):
+    def __repr__(self):
+        return "<ProviderNet: %s>" % self.name
+
+
+class ProviderNetsManager(base.Manager):
+    resource_class = ProviderNet
+
+    def get(self, providernet_name):
+        """
+        Get a provider network.
+
+        :param providernet_name: Name of the :class:`ProviderNet` to get.
+        :rtype: :class:`ProviderNet`
+        """
+        return self._get("/wrs-providernet/%s" % providernet_name,
+                         "providernet")
+
+
+@utils.arg(
+    'providernet',
+    metavar='<providernet_id>',
+    help=_('id of the provider network.'))
+def do_providernet_show(cs, args):
+    """Show details of a given provider network."""
+    providernet = cs.wrs_providernets.get(args.providernet)
+    utils.print_dict(providernet._info)
diff --git a/novaclient/v2/servers.py b/novaclient/v2/servers.py
index 3139792..562c2ff 100644
--- a/novaclient/v2/servers.py
+++ b/novaclient/v2/servers.py
@@ -798,6 +798,9 @@ class ServerManager(base.BootingManagerWithFind):
                         net_data['port'] = nic_info['port-id']
                     if nic_info.get('vif-model'):
                         net_data['wrs-if:vif_model'] = nic_info['vif-model']
+                    if nic_info.get('vif-pci-address'):
+                        net_data['wrs-if:vif_pci_address'] = \
+                            nic_info['vif-pci-address']
                     if nic_info.get('tag'):
                         net_data['tag'] = nic_info['tag']
                     all_net_data.append(net_data)
diff --git a/novaclient/v2/shell.py b/novaclient/v2/shell.py
index 8c59b97..5bd3266 100644
--- a/novaclient/v2/shell.py
+++ b/novaclient/v2/shell.py
@@ -297,7 +297,7 @@ def _parse_nics(cs, args):
     supports_nic_tags = _supports_nic_tags(cs)
 
     nic_keys = {'net-id', 'v4-fixed-ip', 'v6-fixed-ip', 'port-id', 'net-name',
-                'vif-model'}
+                'vif-model', 'vif-pci-address'}
 
     if supports_auto_alloc and supports_nic_tags:
         # API version >= 2.42
@@ -305,8 +305,8 @@ def _parse_nics(cs, args):
         err_msg = (_("Invalid nic argument '%s'. Nic arguments must be of "
                      "the form --nic <auto,none,net-id=net-uuid,"
                      "net-name=network-name,v4-fixed-ip=ip-addr,"
-                     "v6-fixed-ip=ip-addr,port-id=port-uuid,tag=tag, "
-                     "vif-model=model>, "
+                     "v6-fixed-ip=ip-addr,port-id=port-uuid,tag=tag,"
+                     "vif-model=model,vif-pci-address=pci-address>, "
                      "with at minimum net-id, net-name or port-id "
                      "(but not both) specified. Specifying a --nic of auto "
                      "or none cannot be used with any other --nic value."))
@@ -326,8 +326,8 @@ def _parse_nics(cs, args):
         err_msg = (_("Invalid nic argument '%s'. Nic arguments must be of "
                      "the form --nic <net-id=net-uuid,"
                      "net-name=network-name,v4-fixed-ip=ip-addr,"
-                     "v6-fixed-ip=ip-addr,port-id=port-uuid,tag=tag, "
-                     "vif-model=model>, "
+                     "v6-fixed-ip=ip-addr,port-id=port-uuid,tag=tag,"
+                     "vif-model=model,vif-pci-address=pci-address>,"
                      "with at minimum net-id, net-name or port-id "
                      "(but not both) specified."))
     else:
@@ -335,8 +335,8 @@ def _parse_nics(cs, args):
         err_msg = (_("Invalid nic argument '%s'. Nic arguments must be of "
                      "the form --nic <net-id=net-uuid,"
                      "net-name=network-name,v4-fixed-ip=ip-addr,"
-                     "v6-fixed-ip=ip-addr,port-id=port-uuid, "
-                     "vif-model=model>, "
+                     "v6-fixed-ip=ip-addr,port-id=port-uuid,"
+                     "vif-model=model,vif-pci-address=pci-address>, "
                      "with at minimum net-id, net-name or port-id "
                      "(but not both) specified."))
     auto_or_none = False
@@ -807,6 +807,7 @@ def _boot(cs, args):
            "v6-fixed-ip: IPv6 fixed address for NIC (optional), "
            "port-id: attach NIC to port with this UUID, "
            "vif-model: emulated hardware device type (optional), "
+           "vif-pci-address: emulated device PCI address (optional), "
            "(either port-id or net-id must be provided)."))
 @utils.arg(
     '--nic',
-- 
2.7.4

